/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package remote.controller;

import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.text.NumberFormat;
import java.util.Base64;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import javax.imageio.ImageIO;
import javax.swing.JFormattedTextField.AbstractFormatterFactory;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.NumberFormatter;
import remote.server.Server;

/**
 *
 * @author Arnaud Par√©-Vogt
 */
public class RemoteController extends javax.swing.JFrame implements WindowListener {

    private Server server;
    private Server iServer;
    private NumberFormat nfInteger;
    private AbstractFormatterFactory integerFormatter;

    private boolean isDone = false;
    private BufferedImage image;

    private int refreshRate = 1;
    
    private ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
    private ScheduledFuture<?> refresher;
    
    /**
     * Creates new form RemoteController
     */
    public RemoteController() {
        initComponents();
        initFormats();
        this.addWindowListener(this);
    }

    private void initFormats() {
        nfInteger = NumberFormat.getIntegerInstance();
        NumberFormatter nf = new NumberFormatter(nfInteger);
        nf.setMaximum(Server.MAX_PORT_INDEX);
        nf.setMinimum(0);

        NumberFormat editFormat = NumberFormat.getIntegerInstance();
        editFormat.setGroupingUsed(false);
        NumberFormatter editFormatter = new NumberFormatter(editFormat);
        editFormatter.setMaximum(Server.MAX_PORT_INDEX);
        editFormatter.setMinimum(0);

        integerFormatter = new DefaultFormatterFactory(nf, nf, editFormatter, nf);
        port.setFormatterFactory(integerFormatter);
        port.setValue(28015);
        refreshFrequency.setFormatterFactory(integerFormatter);
        refreshFrequency.setValue(1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lPort = new javax.swing.JLabel();
        connectButton = new javax.swing.JButton();
        lStatus = new javax.swing.JLabel();
        updateButton = new javax.swing.JButton();
        lRefreshFrequency = new javax.swing.JLabel();
        refreshFrequency = new javax.swing.JFormattedTextField();
        lCommand = new javax.swing.JLabel();
        command = new javax.swing.JTextField();
        send = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        log = new javax.swing.JTextArea();
        port = new javax.swing.JFormattedTextField();
        imageDisplay = new remote.controller.ImageDisplay();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lPort.setText("Port :");

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        lStatus.setText("Status : ");

        updateButton.setText("Refresh");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        lRefreshFrequency.setText("Refresh frequency (ticks/s) :");

        refreshFrequency.setText("1");
        refreshFrequency.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshFrequencyActionPerformed(evt);
            }
        });

        lCommand.setText("Command :");

        command.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commandActionPerformed(evt);
            }
        });

        send.setText("Send");
        send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendActionPerformed(evt);
            }
        });

        log.setEditable(false);
        log.setColumns(20);
        log.setRows(5);
        jScrollPane1.setViewportView(log);

        port.setText("8000");
        port.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout imageDisplayLayout = new javax.swing.GroupLayout(imageDisplay);
        imageDisplay.setLayout(imageDisplayLayout);
        imageDisplayLayout.setHorizontalGroup(
            imageDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 222, Short.MAX_VALUE)
        );
        imageDisplayLayout.setVerticalGroup(
            imageDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lPort)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(port))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(connectButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lCommand)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(command)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(send, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(updateButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lRefreshFrequency))
                            .addComponent(imageDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                            .addComponent(refreshFrequency, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lPort)
                    .addComponent(port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connectButton)
                    .addComponent(lStatus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateButton)
                    .addComponent(lRefreshFrequency)
                    .addComponent(refreshFrequency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                    .addComponent(imageDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lCommand)
                    .addComponent(command, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(send))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        if (server == null) {
            server = new Server((int) (port.getValue()), (s) -> {
                log(s);
            });
            /*iServer = new ImageServer((int)(port.getValue())+1,(s)->{
             imageDisplay.setImage(s);
             });*/
            iServer = new Server((int) (port.getValue()) + 1, (s) -> {
                try {
                    byte[] bytes = Base64.getDecoder().decode(s);
                    BufferedImage img = ImageIO.read(new ByteArrayInputStream(bytes));

                    imageDisplay.setImage(img);

                    this.image = img;
                    isDone = true;
                    synchronized (this) {
                        this.notifyAll();
                    }
                } catch (IOException ex) {
                    System.out.println("The image could not be read!");
                }
            });
            server.listenForConnection();
            iServer.listenForConnection();
            startRefresh();
            this.connectButton.setEnabled(false);
        }
        refresh();
    }//GEN-LAST:event_connectButtonActionPerformed

    private void commandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commandActionPerformed
        send();
    }//GEN-LAST:event_commandActionPerformed

    private void sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendActionPerformed
        send();
    }//GEN-LAST:event_sendActionPerformed

    private void portActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portActionPerformed
        connectButton.requestFocus();
    }//GEN-LAST:event_portActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        refresh();
    }//GEN-LAST:event_updateButtonActionPerformed

    private void refreshFrequencyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshFrequencyActionPerformed
        setRefreshFrequency((int)refreshFrequency.getValue());
    }//GEN-LAST:event_refreshFrequencyActionPerformed

    private void setRefreshFrequency(int freq){
        this.refreshRate = 1000/freq;
        stopRefresh();
        startRefresh();
    }
    
    private void startRefresh(){
        refresher = scheduler.scheduleAtFixedRate(()->{refresh();}, refreshRate, refreshRate, TimeUnit.MILLISECONDS);
    }
    
    private void stopRefresh(){
        refresher.cancel(true);
    }
    
    public void log(String s) {
        log.append(s + "\n");
    }

    public void refresh() {
        synchronized(server){
            if (server != null) {
                lStatus.setText(server.getStatus());
            }
        }
    }

    public void send() {
        if (server != null && server.getCurrentStatus() == Server.ServerStatus.FINE) {
            server.write(command.getText());
            log(command.getText());
            command.setText("");
        }
    }

    public void send(String s) {
        if (server != null && server.getCurrentStatus() == Server.ServerStatus.FINE) {
            server.write(s);
            log(s);
            command.setText("");
        }
    }

    public boolean isConnected() {
        return (server != null) && (iServer != null) && (server.getCurrentStatus() == Server.ServerStatus.FINE) && (iServer.getCurrentStatus() == Server.ServerStatus.FINE);
    }

    public BufferedImage getImage() {
        if (server.getCurrentStatus() != Server.ServerStatus.FINE || iServer.getCurrentStatus() != Server.ServerStatus.FINE) {
            return null;
        }
        try {
            send("R:");
            while (isDone == false) {
                synchronized (this) {
                    this.wait();
                }
            }
        } catch (InterruptedException ex) {
            System.out.println(ex + " at Rcontroller");
        }
        isDone = false;
        return image;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField command;
    private javax.swing.JButton connectButton;
    private remote.controller.ImageDisplay imageDisplay;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lCommand;
    private javax.swing.JLabel lPort;
    private javax.swing.JLabel lRefreshFrequency;
    private javax.swing.JLabel lStatus;
    private javax.swing.JTextArea log;
    private javax.swing.JFormattedTextField port;
    private javax.swing.JFormattedTextField refreshFrequency;
    private javax.swing.JButton send;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void windowOpened(WindowEvent we) {
    }

    @Override
    public void windowClosing(WindowEvent we) {
        stop();

    }

    @Override
    public void windowClosed(WindowEvent we) {
        stop();
    }

    @Override
    public void windowIconified(WindowEvent we) {
    }

    @Override
    public void windowDeiconified(WindowEvent we) {
    }

    @Override
    public void windowActivated(WindowEvent we) {
    }

    @Override
    public void windowDeactivated(WindowEvent we) {
    }

    public void stop() {
        if (server != null) {
            server.shutDown();
        }
        if (iServer != null) {
            iServer.shutDown();
        }
    }
}
