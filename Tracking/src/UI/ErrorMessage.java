/*
 * The MIT License
 *
 * Copyright 2015 Arnaud Paré-Vogt.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package UI;

import java.awt.BorderLayout;
import java.awt.Frame;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.lang.reflect.InvocationTargetException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author Arnaud Paré-Vogt
 */
public class ErrorMessage extends javax.swing.JDialog {

    private static final String SHOW_ERROR_TEXT = "Show Error";
    private static final String HIDE_ERROR_TEXT = "Hide Error";

    JTextPane textPane;

    /**
     * Creates new form ErrorMessage
     *
     * @param parent
     * @param modal
     * @param message
     * @param title
     * @param error
     */
    public ErrorMessage(java.awt.Frame parent, boolean modal, String message, String title, Exception error) {
        super(parent, modal);
        initComponents();

        textPane = new JTextPane();
        JPanel bufferPanel = new JPanel();
        bufferPanel.setLayout(new BorderLayout());
        bufferPanel.add(textPane);
        jScrollPane1.setViewportView(bufferPanel);
        jScrollPane1.setVisible(false);

        initMessages(title, message, error);

        pack();

        this.setLocationRelativeTo(parent);
    }

    private void initMessages(String title, String message, Exception error) {
        this.setTitle(title);
        niceMessageLabel.setText(message);

        StringWriter errors = new StringWriter();
        error.printStackTrace(new PrintWriter(errors));
        String s = errors.toString();

        //s = s.replace("\n", "<br>");
        textPane.setText(s);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        niceMessageLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        okButton = new javax.swing.JButton();
        showErrorButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        niceMessageLabel.setText("Error message :");

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        showErrorButton.setText("Show Error");
        showErrorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showErrorButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(niceMessageLabel, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(okButton)
                                .addGap(18, 18, 18)
                                .addComponent(showErrorButton)))
                        .addGap(0, 230, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(niceMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(showErrorButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        dispose();
    }//GEN-LAST:event_okButtonActionPerformed

    private void showErrorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showErrorButtonActionPerformed
        if (showErrorButton.getText().equals(SHOW_ERROR_TEXT)) {
            showErrorButton.setText(HIDE_ERROR_TEXT);
            jScrollPane1.setVisible(true);
        } else {
            showErrorButton.setText(SHOW_ERROR_TEXT);
            jScrollPane1.setVisible(false);
        }
        pack();
    }//GEN-LAST:event_showErrorButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel niceMessageLabel;
    private javax.swing.JButton okButton;
    private javax.swing.JButton showErrorButton;
    // End of variables declaration//GEN-END:variables

    /**
     * Shows a nice display for errors in a JDialog
     * @param parent the parent frame
     * @param message the error message (this should be understandable by most users)
     * @param title the title of the error message frame
     * @param error an exception that can optionally be viewed by the user.
     */
    public static void sendMessage(Frame parent, String message, String title, Exception error) {
        Runnable r = () -> {
            ErrorMessage em = new ErrorMessage(parent, true, message, title, error);
            em.setVisible(true);
        };

        try {
            if(!SwingUtilities.isEventDispatchThread()){
                SwingUtilities.invokeAndWait(r);
            }else{
                r.run();
            }
        } catch (InterruptedException | InvocationTargetException ex) {
            SwingUtilities.invokeLater(r);
        }
    }

}
